// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	config "github.com/go-git/go-git/v5/config"

	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"

	v5 "github.com/go-git/go-git/v5"
)

// Repository is an autogenerated mock type for the RepositoryInterface type
type Repository struct {
	mock.Mock
}

// ConfigScoped provides a mock function with given fields: _a0
func (_m *Repository) ConfigScoped(_a0 config.Scope) (*config.Config, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConfigScoped")
	}

	var r0 *config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(config.Scope) (*config.Config, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(config.Scope) *config.Config); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(config.Scope) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repository) CreateTag(_a0 string, _a1 plumbing.Hash, _a2 *v5.CreateTagOptions) (*plumbing.Reference, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, plumbing.Hash, *v5.CreateTagOptions) (*plumbing.Reference, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, plumbing.Hash, *v5.CreateTagOptions) *plumbing.Reference); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, plumbing.Hash, *v5.CreateTagOptions) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Worktree provides a mock function with given fields:
func (_m *Repository) Worktree() (*v5.Worktree, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Worktree")
	}

	var r0 *v5.Worktree
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v5.Worktree, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v5.Worktree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Worktree)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
