// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	openpgp "github.com/ProtonMail/go-crypto/openpgp"
	mock "github.com/stretchr/testify/mock"
)

// GpgEntityAccessor is an autogenerated mock type for the EntityAccessorInterface type
type GpgEntityAccessor struct {
	mock.Mock
}

// GetEntity provides a mock function with given fields: keyPassphrase, signingKey
func (_m *GpgEntityAccessor) GetEntity(keyPassphrase string, signingKey string) (*openpgp.Entity, error) {
	ret := _m.Called(keyPassphrase, signingKey)

	if len(ret) == 0 {
		panic("no return value specified for GetEntity")
	}

	var r0 *openpgp.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*openpgp.Entity, error)); ok {
		return rf(keyPassphrase, signingKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) *openpgp.Entity); ok {
		r0 = rf(keyPassphrase, signingKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openpgp.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(keyPassphrase, signingKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGpgEntityAccessor creates a new instance of GpgEntityAccessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGpgEntityAccessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *GpgEntityAccessor {
	mock := &GpgEntityAccessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
