// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	config "github.com/go-git/go-git/v5/config"

	mock "github.com/stretchr/testify/mock"
)

// GitConfigParser is an autogenerated mock type for the ConfigParserInterface type
type GitConfigParser struct {
	mock.Mock
}

// GetSectionOption provides a mock function with given fields: _a0, _a1
func (_m *GitConfigParser) GetSectionOption(_a0 string, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSectionOption")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetConfig provides a mock function with given fields: _a0
func (_m *GitConfigParser) SetConfig(_a0 *config.Config) {
	_m.Called(_a0)
}

// NewGitConfigParser creates a new instance of GitConfigParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitConfigParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitConfigParser {
	mock := &GitConfigParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
