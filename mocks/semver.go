// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	semver "github.com/Masterminds/semver/v3"
	mock "github.com/stretchr/testify/mock"
)

// Semver is an autogenerated mock type for the SemverInterface type
type Semver struct {
	mock.Mock
}

// IncMajor provides a mock function with given fields:
func (_m *Semver) IncMajor() semver.Version {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncMajor")
	}

	var r0 semver.Version
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	return r0
}

// IncMinor provides a mock function with given fields:
func (_m *Semver) IncMinor() semver.Version {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncMinor")
	}

	var r0 semver.Version
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	return r0
}

// IncPatch provides a mock function with given fields:
func (_m *Semver) IncPatch() semver.Version {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncPatch")
	}

	var r0 semver.Version
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *Semver) Metadata() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Prerelease provides a mock function with given fields:
func (_m *Semver) Prerelease() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Prerelease")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetMetadata provides a mock function with given fields: _a0
func (_m *Semver) SetMetadata(_a0 string) (semver.Version, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetMetadata")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (semver.Version, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) semver.Version); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPrerelease provides a mock function with given fields: _a0
func (_m *Semver) SetPrerelease(_a0 string) (semver.Version, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetPrerelease")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (semver.Version, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) semver.Version); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Semver) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSemver creates a new instance of Semver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSemver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Semver {
	mock := &Semver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
